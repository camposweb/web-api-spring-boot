/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Bootcamp Java - Spring Boot
 * API para o Bootcamp Java - Spring Boot | Projeto desenvolvido como desafio final do bootcamp java com spring boot da Squadra
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AtualizacaoUFDTO,
  DeletarUFDTO,
  ListaUFDTO,
  ListarUfsParams,
  Ufdto,
} from '../api.schemas'

export const listarUfs = (
  params?: ListarUfsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUFDTO[]>> => {
  return axios.get(`http://146.235.29.16:8080/uf`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListarUfsQueryKey = (params?: ListarUfsParams) => {
  return [`http://146.235.29.16:8080/uf`, ...(params ? [params] : [])] as const
}

export const getListarUfsQueryOptions = <
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListarUfsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarUfs>>> = ({
    signal,
  }) => listarUfs(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarUfs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListarUfsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarUfs>>
>
export type ListarUfsQueryError = AxiosError<unknown>

export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListarUfsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarUfs>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarUfs>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListarUfsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const atualizarUF = (
  atualizacaoUFDTO: AtualizacaoUFDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUFDTO[]>> => {
  return axios.put(`http://146.235.29.16:8080/uf`, atualizacaoUFDTO, options)
}

export const getAtualizarUFMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarUF>>,
    TError,
    { data: AtualizacaoUFDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizarUF>>,
  TError,
  { data: AtualizacaoUFDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizarUF>>,
    { data: AtualizacaoUFDTO }
  > = (props) => {
    const { data } = props ?? {}

    return atualizarUF(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AtualizarUFMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizarUF>>
>
export type AtualizarUFMutationBody = AtualizacaoUFDTO
export type AtualizarUFMutationError = AxiosError<unknown>

export const useAtualizarUF = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarUF>>,
    TError,
    { data: AtualizacaoUFDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof atualizarUF>>,
  TError,
  { data: AtualizacaoUFDTO },
  TContext
> => {
  const mutationOptions = getAtualizarUFMutationOptions(options)

  return useMutation(mutationOptions)
}
export const cadastrarUF = (
  ufdto: Ufdto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUFDTO[]>> => {
  return axios.post(`http://146.235.29.16:8080/uf`, ufdto, options)
}

export const getCadastrarUFMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarUF>>,
    TError,
    { data: Ufdto },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof cadastrarUF>>,
  TError,
  { data: Ufdto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cadastrarUF>>,
    { data: Ufdto }
  > = (props) => {
    const { data } = props ?? {}

    return cadastrarUF(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CadastrarUFMutationResult = NonNullable<
  Awaited<ReturnType<typeof cadastrarUF>>
>
export type CadastrarUFMutationBody = Ufdto
export type CadastrarUFMutationError = AxiosError<unknown>

export const useCadastrarUF = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarUF>>,
    TError,
    { data: Ufdto },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof cadastrarUF>>,
  TError,
  { data: Ufdto },
  TContext
> => {
  const mutationOptions = getCadastrarUFMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deletarUF = (
  deletarUFDTO: DeletarUFDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUFDTO[]>> => {
  return axios.delete(`http://146.235.29.16:8080/uf`, {
    data: deletarUFDTO,
    ...options,
  })
}

export const getDeletarUFMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarUF>>,
    TError,
    { data: DeletarUFDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletarUF>>,
  TError,
  { data: DeletarUFDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletarUF>>,
    { data: DeletarUFDTO }
  > = (props) => {
    const { data } = props ?? {}

    return deletarUF(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletarUFMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletarUF>>
>
export type DeletarUFMutationBody = DeletarUFDTO
export type DeletarUFMutationError = AxiosError<unknown>

export const useDeletarUF = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarUF>>,
    TError,
    { data: DeletarUFDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deletarUF>>,
  TError,
  { data: DeletarUFDTO },
  TContext
> => {
  const mutationOptions = getDeletarUFMutationOptions(options)

  return useMutation(mutationOptions)
}
