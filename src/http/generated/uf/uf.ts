/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Bootcamp Java - Spring Boot
 * API para o Bootcamp Java - Spring Boot | Projeto desenvolvido como desafio final do bootcamp java com spring boot da Squadra
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AtualizacaoUfDTO,
  DeletarUfDTO,
  ListaUfDTO,
  ListarUfsParams,
  UfDTO,
} from '../api.schemas'

export const listarUfs = (
  params?: ListarUfsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUfDTO[]>> => {
  return axios.get(`http://146.235.29.16:8080/uf`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListarUfsQueryKey = (params?: ListarUfsParams) => {
  return [`http://146.235.29.16:8080/uf`, ...(params ? [params] : [])] as const
}

export const getListarUfsQueryOptions = <
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListarUfsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarUfs>>> = ({
    signal,
  }) => listarUfs(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarUfs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListarUfsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarUfs>>
>
export type ListarUfsQueryError = AxiosError<unknown>

export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListarUfsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarUfs>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarUfs>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useListarUfs<
  TData = Awaited<ReturnType<typeof listarUfs>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarUfsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarUfs>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListarUfsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const atualizarUf = (
  atualizacaoUfDTO: AtualizacaoUfDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUfDTO[]>> => {
  return axios.put(`http://146.235.29.16:8080/uf`, atualizacaoUfDTO, options)
}

export const getAtualizarUfMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarUf>>,
    TError,
    { data: AtualizacaoUfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizarUf>>,
  TError,
  { data: AtualizacaoUfDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizarUf>>,
    { data: AtualizacaoUfDTO }
  > = (props) => {
    const { data } = props ?? {}

    return atualizarUf(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AtualizarUfMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizarUf>>
>
export type AtualizarUfMutationBody = AtualizacaoUfDTO
export type AtualizarUfMutationError = AxiosError<unknown>

export const useAtualizarUf = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarUf>>,
    TError,
    { data: AtualizacaoUfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof atualizarUf>>,
  TError,
  { data: AtualizacaoUfDTO },
  TContext
> => {
  const mutationOptions = getAtualizarUfMutationOptions(options)

  return useMutation(mutationOptions)
}
export const cadastrarUf = (
  ufDTO: UfDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUfDTO[]>> => {
  return axios.post(`http://146.235.29.16:8080/uf`, ufDTO, options)
}

export const getCadastrarUfMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarUf>>,
    TError,
    { data: UfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof cadastrarUf>>,
  TError,
  { data: UfDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cadastrarUf>>,
    { data: UfDTO }
  > = (props) => {
    const { data } = props ?? {}

    return cadastrarUf(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CadastrarUfMutationResult = NonNullable<
  Awaited<ReturnType<typeof cadastrarUf>>
>
export type CadastrarUfMutationBody = UfDTO
export type CadastrarUfMutationError = AxiosError<unknown>

export const useCadastrarUf = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarUf>>,
    TError,
    { data: UfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof cadastrarUf>>,
  TError,
  { data: UfDTO },
  TContext
> => {
  const mutationOptions = getCadastrarUfMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deletarUf = (
  deletarUfDTO: DeletarUfDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaUfDTO[]>> => {
  return axios.delete(`http://146.235.29.16:8080/uf`, {
    data: deletarUfDTO,
    ...options,
  })
}

export const getDeletarUfMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarUf>>,
    TError,
    { data: DeletarUfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletarUf>>,
  TError,
  { data: DeletarUfDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletarUf>>,
    { data: DeletarUfDTO }
  > = (props) => {
    const { data } = props ?? {}

    return deletarUf(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletarUfMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletarUf>>
>
export type DeletarUfMutationBody = DeletarUfDTO
export type DeletarUfMutationError = AxiosError<unknown>

export const useDeletarUf = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarUf>>,
    TError,
    { data: DeletarUfDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deletarUf>>,
  TError,
  { data: DeletarUfDTO },
  TContext
> => {
  const mutationOptions = getDeletarUfMutationOptions(options)

  return useMutation(mutationOptions)
}
