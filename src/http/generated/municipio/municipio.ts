/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Bootcamp Java - Spring Boot
 * API para o Bootcamp Java - Spring Boot | Projeto desenvolvido como desafio final do bootcamp java com spring boot da Squadra
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AtualizacaoMunicipioDTO,
  DeletarMunicipioDTO,
  ListaMunicipioDTO,
  ListarMunicipiosParams,
  MunicipioDTO,
} from '../api.schemas'

export const listarMunicipios = (
  params?: ListarMunicipiosParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaMunicipioDTO[]>> => {
  return axios.get(`http://146.235.29.16:8080/municipio`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListarMunicipiosQueryKey = (
  params?: ListarMunicipiosParams,
) => {
  return [
    `http://146.235.29.16:8080/municipio`,
    ...(params ? [params] : []),
  ] as const
}

export const getListarMunicipiosQueryOptions = <
  TData = Awaited<ReturnType<typeof listarMunicipios>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarMunicipiosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listarMunicipios>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListarMunicipiosQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listarMunicipios>>
  > = ({ signal }) => listarMunicipios(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarMunicipios>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListarMunicipiosQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarMunicipios>>
>
export type ListarMunicipiosQueryError = AxiosError<unknown>

export function useListarMunicipios<
  TData = Awaited<ReturnType<typeof listarMunicipios>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListarMunicipiosParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listarMunicipios>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarMunicipios>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarMunicipios<
  TData = Awaited<ReturnType<typeof listarMunicipios>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarMunicipiosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listarMunicipios>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarMunicipios>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarMunicipios<
  TData = Awaited<ReturnType<typeof listarMunicipios>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarMunicipiosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listarMunicipios>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useListarMunicipios<
  TData = Awaited<ReturnType<typeof listarMunicipios>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarMunicipiosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listarMunicipios>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListarMunicipiosQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const atualizarMunicipio = (
  atualizacaoMunicipioDTO: AtualizacaoMunicipioDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaMunicipioDTO[]>> => {
  return axios.put(
    `http://146.235.29.16:8080/municipio`,
    atualizacaoMunicipioDTO,
    options,
  )
}

export const getAtualizarMunicipioMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarMunicipio>>,
    TError,
    { data: AtualizacaoMunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizarMunicipio>>,
  TError,
  { data: AtualizacaoMunicipioDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizarMunicipio>>,
    { data: AtualizacaoMunicipioDTO }
  > = (props) => {
    const { data } = props ?? {}

    return atualizarMunicipio(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AtualizarMunicipioMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizarMunicipio>>
>
export type AtualizarMunicipioMutationBody = AtualizacaoMunicipioDTO
export type AtualizarMunicipioMutationError = AxiosError<unknown>

export const useAtualizarMunicipio = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarMunicipio>>,
    TError,
    { data: AtualizacaoMunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof atualizarMunicipio>>,
  TError,
  { data: AtualizacaoMunicipioDTO },
  TContext
> => {
  const mutationOptions = getAtualizarMunicipioMutationOptions(options)

  return useMutation(mutationOptions)
}
export const cadastrarMunicipio = (
  municipioDTO: MunicipioDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaMunicipioDTO[]>> => {
  return axios.post(
    `http://146.235.29.16:8080/municipio`,
    municipioDTO,
    options,
  )
}

export const getCadastrarMunicipioMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarMunicipio>>,
    TError,
    { data: MunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof cadastrarMunicipio>>,
  TError,
  { data: MunicipioDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cadastrarMunicipio>>,
    { data: MunicipioDTO }
  > = (props) => {
    const { data } = props ?? {}

    return cadastrarMunicipio(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CadastrarMunicipioMutationResult = NonNullable<
  Awaited<ReturnType<typeof cadastrarMunicipio>>
>
export type CadastrarMunicipioMutationBody = MunicipioDTO
export type CadastrarMunicipioMutationError = AxiosError<unknown>

export const useCadastrarMunicipio = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarMunicipio>>,
    TError,
    { data: MunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof cadastrarMunicipio>>,
  TError,
  { data: MunicipioDTO },
  TContext
> => {
  const mutationOptions = getCadastrarMunicipioMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deletarMunicipio = (
  deletarMunicipioDTO: DeletarMunicipioDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaMunicipioDTO[]>> => {
  return axios.delete(`http://146.235.29.16:8080/municipio`, {
    data: deletarMunicipioDTO,
    ...options,
  })
}

export const getDeletarMunicipioMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarMunicipio>>,
    TError,
    { data: DeletarMunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletarMunicipio>>,
  TError,
  { data: DeletarMunicipioDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletarMunicipio>>,
    { data: DeletarMunicipioDTO }
  > = (props) => {
    const { data } = props ?? {}

    return deletarMunicipio(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletarMunicipioMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletarMunicipio>>
>
export type DeletarMunicipioMutationBody = DeletarMunicipioDTO
export type DeletarMunicipioMutationError = AxiosError<unknown>

export const useDeletarMunicipio = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarMunicipio>>,
    TError,
    { data: DeletarMunicipioDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deletarMunicipio>>,
  TError,
  { data: DeletarMunicipioDTO },
  TContext
> => {
  const mutationOptions = getDeletarMunicipioMutationOptions(options)

  return useMutation(mutationOptions)
}
