/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Bootcamp Java - Spring Boot
 * API para o Bootcamp Java - Spring Boot | Projeto desenvolvido como desafio final do bootcamp java com spring boot da Squadra
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AtualizacaoBairroDTO,
  BairroDTO,
  DeletarBairroDTO,
  ListaBairroDTO,
  ListarBairrosParams,
} from '../api.schemas'

export const listarBairros = (
  params?: ListarBairrosParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaBairroDTO[]>> => {
  return axios.get(`http://146.235.29.16:8080/bairro`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListarBairrosQueryKey = (params?: ListarBairrosParams) => {
  return [
    `http://146.235.29.16:8080/bairro`,
    ...(params ? [params] : []),
  ] as const
}

export const getListarBairrosQueryOptions = <
  TData = Awaited<ReturnType<typeof listarBairros>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarBairrosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarBairros>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListarBairrosQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarBairros>>> = ({
    signal,
  }) => listarBairros(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarBairros>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListarBairrosQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarBairros>>
>
export type ListarBairrosQueryError = AxiosError<unknown>

export function useListarBairros<
  TData = Awaited<ReturnType<typeof listarBairros>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListarBairrosParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarBairros>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarBairros>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarBairros<
  TData = Awaited<ReturnType<typeof listarBairros>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarBairrosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarBairros>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarBairros>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarBairros<
  TData = Awaited<ReturnType<typeof listarBairros>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarBairrosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarBairros>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useListarBairros<
  TData = Awaited<ReturnType<typeof listarBairros>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarBairrosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarBairros>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListarBairrosQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const atualizarBairro = (
  atualizacaoBairroDTO: AtualizacaoBairroDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaBairroDTO[]>> => {
  return axios.put(
    `http://146.235.29.16:8080/bairro`,
    atualizacaoBairroDTO,
    options,
  )
}

export const getAtualizarBairroMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarBairro>>,
    TError,
    { data: AtualizacaoBairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizarBairro>>,
  TError,
  { data: AtualizacaoBairroDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizarBairro>>,
    { data: AtualizacaoBairroDTO }
  > = (props) => {
    const { data } = props ?? {}

    return atualizarBairro(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AtualizarBairroMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizarBairro>>
>
export type AtualizarBairroMutationBody = AtualizacaoBairroDTO
export type AtualizarBairroMutationError = AxiosError<unknown>

export const useAtualizarBairro = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarBairro>>,
    TError,
    { data: AtualizacaoBairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof atualizarBairro>>,
  TError,
  { data: AtualizacaoBairroDTO },
  TContext
> => {
  const mutationOptions = getAtualizarBairroMutationOptions(options)

  return useMutation(mutationOptions)
}
export const cadastrarBairro = (
  bairroDTO: BairroDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaBairroDTO[]>> => {
  return axios.post(`http://146.235.29.16:8080/bairro`, bairroDTO, options)
}

export const getCadastrarBairroMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarBairro>>,
    TError,
    { data: BairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof cadastrarBairro>>,
  TError,
  { data: BairroDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cadastrarBairro>>,
    { data: BairroDTO }
  > = (props) => {
    const { data } = props ?? {}

    return cadastrarBairro(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CadastrarBairroMutationResult = NonNullable<
  Awaited<ReturnType<typeof cadastrarBairro>>
>
export type CadastrarBairroMutationBody = BairroDTO
export type CadastrarBairroMutationError = AxiosError<unknown>

export const useCadastrarBairro = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarBairro>>,
    TError,
    { data: BairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof cadastrarBairro>>,
  TError,
  { data: BairroDTO },
  TContext
> => {
  const mutationOptions = getCadastrarBairroMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deletarBairro = (
  deletarBairroDTO: DeletarBairroDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaBairroDTO[]>> => {
  return axios.delete(`http://146.235.29.16:8080/bairro`, {
    data: deletarBairroDTO,
    ...options,
  })
}

export const getDeletarBairroMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarBairro>>,
    TError,
    { data: DeletarBairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletarBairro>>,
  TError,
  { data: DeletarBairroDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletarBairro>>,
    { data: DeletarBairroDTO }
  > = (props) => {
    const { data } = props ?? {}

    return deletarBairro(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletarBairroMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletarBairro>>
>
export type DeletarBairroMutationBody = DeletarBairroDTO
export type DeletarBairroMutationError = AxiosError<unknown>

export const useDeletarBairro = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarBairro>>,
    TError,
    { data: DeletarBairroDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deletarBairro>>,
  TError,
  { data: DeletarBairroDTO },
  TContext
> => {
  const mutationOptions = getDeletarBairroMutationOptions(options)

  return useMutation(mutationOptions)
}
