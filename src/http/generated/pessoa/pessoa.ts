/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Bootcamp Java - Spring Boot
 * API para o Bootcamp Java - Spring Boot | Projeto desenvolvido como desafio final do bootcamp java com spring boot da Squadra
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AtualizacaoPessoaDTO,
  DeletarPessoaDTO,
  ListaPessoaDTO,
  ListarPessoasParams,
  PessoaDTO,
} from '../api.schemas'

export const listarPessoas = (
  params?: ListarPessoasParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaPessoaDTO[]>> => {
  return axios.get(`http://146.235.29.16:8080/pessoa`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListarPessoasQueryKey = (params?: ListarPessoasParams) => {
  return [
    `http://146.235.29.16:8080/pessoa`,
    ...(params ? [params] : []),
  ] as const
}

export const getListarPessoasQueryOptions = <
  TData = Awaited<ReturnType<typeof listarPessoas>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarPessoasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListarPessoasQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarPessoas>>> = ({
    signal,
  }) => listarPessoas(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarPessoas>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListarPessoasQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarPessoas>>
>
export type ListarPessoasQueryError = AxiosError<unknown>

export function useListarPessoas<
  TData = Awaited<ReturnType<typeof listarPessoas>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListarPessoasParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarPessoas>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarPessoas<
  TData = Awaited<ReturnType<typeof listarPessoas>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarPessoasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarPessoas>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListarPessoas<
  TData = Awaited<ReturnType<typeof listarPessoas>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarPessoasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useListarPessoas<
  TData = Awaited<ReturnType<typeof listarPessoas>>,
  TError = AxiosError<unknown>,
>(
  params?: ListarPessoasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListarPessoasQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const atualizarPessoa = (
  atualizacaoPessoaDTO: AtualizacaoPessoaDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaPessoaDTO[]>> => {
  return axios.put(
    `http://146.235.29.16:8080/pessoa`,
    atualizacaoPessoaDTO,
    options,
  )
}

export const getAtualizarPessoaMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarPessoa>>,
    TError,
    { data: AtualizacaoPessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizarPessoa>>,
  TError,
  { data: AtualizacaoPessoaDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizarPessoa>>,
    { data: AtualizacaoPessoaDTO }
  > = (props) => {
    const { data } = props ?? {}

    return atualizarPessoa(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AtualizarPessoaMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizarPessoa>>
>
export type AtualizarPessoaMutationBody = AtualizacaoPessoaDTO
export type AtualizarPessoaMutationError = AxiosError<unknown>

export const useAtualizarPessoa = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizarPessoa>>,
    TError,
    { data: AtualizacaoPessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof atualizarPessoa>>,
  TError,
  { data: AtualizacaoPessoaDTO },
  TContext
> => {
  const mutationOptions = getAtualizarPessoaMutationOptions(options)

  return useMutation(mutationOptions)
}
export const cadastrarPessoa = (
  pessoaDTO: PessoaDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaPessoaDTO[]>> => {
  return axios.post(`http://146.235.29.16:8080/pessoa`, pessoaDTO, options)
}

export const getCadastrarPessoaMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarPessoa>>,
    TError,
    { data: PessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof cadastrarPessoa>>,
  TError,
  { data: PessoaDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cadastrarPessoa>>,
    { data: PessoaDTO }
  > = (props) => {
    const { data } = props ?? {}

    return cadastrarPessoa(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CadastrarPessoaMutationResult = NonNullable<
  Awaited<ReturnType<typeof cadastrarPessoa>>
>
export type CadastrarPessoaMutationBody = PessoaDTO
export type CadastrarPessoaMutationError = AxiosError<unknown>

export const useCadastrarPessoa = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cadastrarPessoa>>,
    TError,
    { data: PessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof cadastrarPessoa>>,
  TError,
  { data: PessoaDTO },
  TContext
> => {
  const mutationOptions = getCadastrarPessoaMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deletarPessoa = (
  deletarPessoaDTO: DeletarPessoaDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListaPessoaDTO[]>> => {
  return axios.delete(`http://146.235.29.16:8080/pessoa`, {
    data: deletarPessoaDTO,
    ...options,
  })
}

export const getDeletarPessoaMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarPessoa>>,
    TError,
    { data: DeletarPessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletarPessoa>>,
  TError,
  { data: DeletarPessoaDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletarPessoa>>,
    { data: DeletarPessoaDTO }
  > = (props) => {
    const { data } = props ?? {}

    return deletarPessoa(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletarPessoaMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletarPessoa>>
>
export type DeletarPessoaMutationBody = DeletarPessoaDTO
export type DeletarPessoaMutationError = AxiosError<unknown>

export const useDeletarPessoa = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletarPessoa>>,
    TError,
    { data: DeletarPessoaDTO },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deletarPessoa>>,
  TError,
  { data: DeletarPessoaDTO },
  TContext
> => {
  const mutationOptions = getDeletarPessoaMutationOptions(options)

  return useMutation(mutationOptions)
}
